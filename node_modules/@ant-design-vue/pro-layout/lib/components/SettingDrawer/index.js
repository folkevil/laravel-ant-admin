'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SettingDrawerProps = exports.settings = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

require('./index.less');

var _omit = require('omit.js');

var _omit2 = _interopRequireDefault(_omit);

var _vueTypes = require('ant-design-vue/es/_util/vue-types');

var _vueTypes2 = _interopRequireDefault(_vueTypes);

var _antDesignVue = require('ant-design-vue');

var _BlockCheckbox = require('./BlockCheckbox');

var _BlockCheckbox2 = _interopRequireDefault(_BlockCheckbox);

var _ThemeColor = require('./ThemeColor');

var _ThemeColor2 = _interopRequireDefault(_ThemeColor);

var _LayoutChange = require('./LayoutChange');

var _LayoutChange2 = _interopRequireDefault(_LayoutChange);

var _dynamicTheme = require('../../utils/dynamicTheme');

var _util = require('../../utils/util');

var _vueCopyToClipboard = require('vue-copy-to-clipboard');

var _vueCopyToClipboard2 = _interopRequireDefault(_vueCopyToClipboard);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var baseClassName = 'ant-pro-setting-drawer';

var BodyProps = {
  title: _vueTypes2['default'].string.def('')
};

var Body = {
  props: BodyProps,
  render: function render(h) {
    var title = this.title;


    return h(
      'div',
      { style: { marginBottom: 24 } },
      [h(
        'h3',
        { 'class': baseClassName + '-title' },
        [title]
      ), this.$slots['default']]
    );
  }
};

var defaultI18nRender = function defaultI18nRender(t) {
  return t;
};

var getThemeList = function getThemeList(i18nRender) {

  var list = window.umi_plugin_ant_themeVar || [];

  var themeList = [{
    key: 'light',
    url: 'https://gw.alipayobjects.com/zos/antfincdn/NQ%24zoisaD2/jpRkZQMyYRryryPNtyIC.svg',
    title: i18nRender('app.setting.pagestyle.light')
  }, {
    key: 'dark',
    url: 'https://gw.alipayobjects.com/zos/antfincdn/XwFOFbLkSM/LCkqqYNmvBEbokSDscrm.svg',
    title: i18nRender('app.setting.pagestyle.dark')
  }];

  var darkColorList = [{
    key: '#1890ff',
    color: '#1890ff',
    theme: 'dark'
  }];

  var lightColorList = [{
    key: '#1890ff',
    color: '#1890ff',
    theme: 'dark'
  }];

  if (list.find(function (item) {
    return item.theme === 'dark';
  })) {
    themeList.push({
      // disable click
      disable: true,
      key: 'realDark',
      url: 'https://gw.alipayobjects.com/zos/antfincdn/hmKaLQvmY2/LCkqqYNmvBEbokSDscrm.svg',
      title: i18nRender('app.setting.pagestyle.realdark')
    });
  }
  // insert  theme color List
  list.forEach(function (item) {
    var color = (item.modifyVars || {})['@primary-color'];
    if (item.theme === 'dark' && color) {
      darkColorList.push((0, _extends3['default'])({
        color: color
      }, item));
    }
    if (!item.theme || item.theme === 'light') {
      lightColorList.push((0, _extends3['default'])({
        color: color
      }, item));
    }
  });

  return {
    colorList: {
      dark: darkColorList,
      light: lightColorList
    },
    themeList: themeList
  };
};

var handleChangeSetting = function handleChangeSetting(key, value, hideMessageLoading) {
  if (key === 'primaryColor') {
    // 更新主色调
    (0, _dynamicTheme.updateTheme)(value);
  }
  if (key === 'colorWeak') {
    (0, _dynamicTheme.updateColorWeak)(value);
  }
};

var genCopySettingJson = function genCopySettingJson(settings) {
  return JSON.stringify((0, _omit2['default'])((0, _extends3['default'])({}, settings, {
    primaryColor: (0, _util.genStringToTheme)(settings.primaryColor)
  }), ['colorWeak']), null, 2);
};

var settings = exports.settings = {
  theme: _vueTypes2['default'].oneOf(['dark', 'light', 'realDark']),
  primaryColor: _vueTypes2['default'].string,
  layout: _vueTypes2['default'].oneOf(['sidemenu', 'topmenu']),
  colorWeak: _vueTypes2['default'].bool,
  contentWidth: _vueTypes2['default'].bool,
  fixedHeader: _vueTypes2['default'].bool,
  fixSiderbar: _vueTypes2['default'].bool,
  hideHintAlert: _vueTypes2['default'].bool.def(false),
  hideCopyButton: _vueTypes2['default'].bool.def(false)
};

var SettingDrawerProps = exports.SettingDrawerProps = {
  getContainer: _vueTypes2['default'].func,
  settings: _vueTypes2['default'].objectOf(settings),

  i18nRender: _vueTypes2['default'].oneOfType([_vueTypes2['default'].func, _vueTypes2['default'].bool]).def(false)
};

var SettingDrawer = {
  name: 'SettingDrawer',
  props: SettingDrawerProps,
  inject: ['locale'],
  data: function data() {
    return {
      show: false
    };
  },
  render: function render(h) {
    var _this = this;

    var setShow = this.setShow,
        getContainer = this.getContainer,
        settings = this.settings;
    var _settings$theme = settings.theme,
        theme = _settings$theme === undefined ? 'dark' : _settings$theme,
        _settings$primaryColo = settings.primaryColor,
        primaryColor = _settings$primaryColo === undefined ? 'daybreak' : _settings$primaryColo,
        _settings$layout = settings.layout,
        layout = _settings$layout === undefined ? 'sidemenu' : _settings$layout,
        _settings$fixedHeader = settings.fixedHeader,
        fixedHeader = _settings$fixedHeader === undefined ? false : _settings$fixedHeader,
        _settings$fixSiderbar = settings.fixSiderbar,
        fixSiderbar = _settings$fixSiderbar === undefined ? false : _settings$fixSiderbar,
        _settings$contentWidt = settings.contentWidth,
        contentWidth = _settings$contentWidt === undefined ? false : _settings$contentWidt,
        hideHintAlert = settings.hideHintAlert,
        hideCopyButton = settings.hideCopyButton,
        colorWeak = settings.colorWeak;


    var i18n = this.$props.i18nRender || this.locale || defaultI18nRender;
    var themeList = getThemeList(i18n);
    var isTopMenu = layout === 'topmenu';

    var iconStyle = {
      color: '#fff',
      fontSize: 20
    };

    var changeSetting = function changeSetting(type, value) {
      _this.$emit('change', { type: type, value: value });
      handleChangeSetting(type, value, false);
    };

    return h(
      _antDesignVue.Drawer,
      {
        attrs: {
          visible: this.show,
          width: 300,

          placement: 'right',
          getContainer: getContainer
          /*handle={
            <div class="ant-pro-setting-drawer-handle" onClick={() => setShow(!this.show)}>
              {this.show
                ? (<Icon type="close" style={iconStyle} />)
                : (<Icon type="setting" style={iconStyle} />)
              }
            </div>
          }*/
        },
        on: {
          'close': function close() {
            return setShow(false);
          }
        },
        style: {
          zIndex: 999
        }
      },
      [h(
        'template',
        { slot: 'handle' },
        [h(
          'div',
          { 'class': baseClassName + '-handle', on: {
              'click': function click() {
                return setShow(!_this.show);
              }
            }
          },
          [this.show ? h(_antDesignVue.Icon, {
            attrs: { type: 'close' },
            style: iconStyle }) : h(_antDesignVue.Icon, {
            attrs: { type: 'setting' },
            style: iconStyle })]
        )]
      ), h(
        'div',
        { 'class': baseClassName + '-content' },
        [h(
          Body,
          {
            attrs: { title: i18n('app.setting.pagestyle') }
          },
          [h(_BlockCheckbox2['default'], {
            attrs: { i18nRender: i18n, list: themeList.themeList, value: theme },
            on: {
              'change': function change(val) {
                changeSetting('theme', val);
              }
            }
          })]
        ), h(_ThemeColor2['default'], {
          attrs: {
            i18nRender: i18n,
            title: i18n('app.setting.themecolor'),
            value: primaryColor,
            colors: themeList.colorList[theme === 'realDark' ? 'dark' : 'light']
          },
          on: {
            'change': function change(color) {
              changeSetting('primaryColor', color, null);
            }
          }
        }), h(_antDesignVue.Divider), h(
          Body,
          {
            attrs: { title: i18n('app.setting.navigationmode') }
          },
          [h(_BlockCheckbox2['default'], {
            attrs: { i18nRender: i18n, value: layout },
            on: {
              'change': function change(value) {
                changeSetting('layout', value, null);
              }
            }
          })]
        ), h(_LayoutChange2['default'], {
          attrs: {
            i18nRender: i18n,
            contentWidth: contentWidth,
            fixedHeader: fixedHeader,
            fixSiderbar: isTopMenu ? false : fixSiderbar,
            layout: layout
          },
          on: {
            'change': function change(_ref) {
              var type = _ref.type,
                  value = _ref.value;

              changeSetting(type, value);
            }
          }
        }), h(_antDesignVue.Divider), h(
          Body,
          {
            attrs: { title: i18n('app.setting.othersettings') }
          },
          [h(_antDesignVue.List, {
            attrs: {
              split: false,
              renderItem: function renderItem(item) {
                return (0, _LayoutChange.renderLayoutSettingItem)(h, item);
              },
              dataSource: [{
                title: i18n('app.setting.weakmode'),
                action: h(_antDesignVue.Switch, {
                  attrs: {
                    size: 'small',
                    checked: !!colorWeak
                  },
                  on: {
                    'change': function change(checked) {
                      return changeSetting('colorWeak', checked);
                    }
                  }
                })
              }]
            }
          })]
        ), hideHintAlert && hideCopyButton ? null : h(_antDesignVue.Divider), hideHintAlert ? null : h(_antDesignVue.Alert, {
          attrs: {
            type: 'warning',
            message: i18n('app.setting.production.hint'),
            icon: h(_antDesignVue.Icon, {
              attrs: { type: 'notification' }
            }),
            showIcon: true
          },
          style: { marginBottom: '16px' }
        }), hideCopyButton ? null : h(
          _vueCopyToClipboard2['default'],
          {
            attrs: {
              text: genCopySettingJson(settings)
            },
            on: {
              'copy': function copy() {
                return _antDesignVue.message.success(i18n('app.setting.copyinfo'));
              }
            }
          },
          [h(
            _antDesignVue.Button,
            {
              attrs: { block: true }
            },
            [h(_antDesignVue.Icon, {
              attrs: { type: 'copy' }
            }), i18n('app.setting.copy')]
          )]
        )]
      )]
    );
  },

  methods: {
    setShow: function setShow(flag) {
      this.show = flag;
    }
  }
};

exports['default'] = SettingDrawer;